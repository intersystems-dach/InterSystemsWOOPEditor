{"users":[{"username":"pbonin","password":"123","level":1},{"username":"pb","password":"123","level":2}],"chapters":[{"verified":false,"title":"Java Introduction","pages":[{"content":"# Install Java\n\n## Windows\n\n1. Download the latest version of Java from [here](https://www.oracle.com/java/technologies/javase-downloads.html).\n2. Run the installer and follow the instructions.\n\n## Linux\n\n1. Open a terminal and run the following command:\n\n   ```bash\n   sudo apt install default-jre\n   ```\n\n2. Enter your password and press enter.\n3. Wait for the installation to finish.\n\n## Mac\n\n1. Download the latest version of Java from [here](https://www.oracle.com/java/technologies/javase-downloads.html).\n2. Run the installer and follow the instructions.\n","tip":"","result":""},{"content":"# Hello World\n\n1. Open a new file in your favorite text editor and save it as `Hello.java`.\n2. Copy the following code into the file:\n\n```java\npublic class Hello {\n    public static void main(String[] args) {\n        ...\n    }\n}\n```\n\n3. Replace the `...` so that \"_Hello World_\" will be printed to the console.\n","tip":"Use the `System.out.print` method to print the string \"_Hello World_\" to the console.\n","result":"_Hello.java_:\n\n```java\npublic class Hello {\n    public static void main(String[] args) {\n        System.out.print(\"Hello World\");\n    }\n}\n```\n"},{"content":"# Using string variables\n\nYou can define a variable by assigning a value to it. The variable name is on the left of the assignment operator `=` and the value is on the right.\n\n```java\nString name = value;\n```\n\nDefine a variable called `name` and assign it the value `\"John\"` and then print it.\n","tip":"","result":"```java\nString name = \"John\";\nSystem.out.print(name);\n```\n"}],"config":{"password":"123","language":"english","author":"pb","description":"A java Introduction"}},{"verified":false,"title":"Python Introduction","pages":[{"content":"# Install Python\n\n1. Download the latest version of Python from [python.org](https://www.python.org/downloads/).\n2. Run the installer.\n3. Check the box that says \"Add Python to PATH\".\n4. Click \"Install Now\".\n","tip":"","result":""},{"content":"# Hello World\n\n1. Open a new file in your favorite text editor and save it as `hello.py`.\n2. Then, print the string \"_Hello World_\" to the console.\n3. Run the program by typing `python hello.py` in the terminal with:\n\n```bash\npython hello.py\n```\n","tip":"Use the `print` function to print the string \"_Hello World_\" to the console.\n","result":"_hello.py_:\n\n```python\nprint(\"Hello World\")\n```\n"},{"content":"# Using variables\n\nYou can define a variable by assigning a value to it. The variable name is on the left of the assignment operator `=` and the value is on the right.\n\n```python\nname = value\n```\n\nDefine a variable called `name` and assign it the value `\"John\"` and then print it.\n","tip":"","result":"```python\nname = \"John\"\nprint(name)\n```\n"}],"config":{"password":"123","language":"english","author":"pb","description":"A python Introduction"}},{"verified":false,"title":"Grundlagen","pages":[{"content":"# Einleitung\n\nIn den nachfolgenden Übungen erstellen Sie Schritt für Schritt ein einfaches Datenmodell zur \nImplementierung einer Warenwirtschaft.\n\nDarauf aufbauend werden Daten zu dem Modell erzeugt und anschließend werden verschiedene \nTechniken demonstriert und geübt, mit den Daten zu arbeiten. Dabei werden sowohl der Objektzugriff \nals auch die verschiedenen Möglichkeiten mit SQL genutzt, um die Daten zu verarbeiten.\nEine weitere Rolle wird die Implementierung von Logik über Klassen- und Instanzmethoden sein.\nZum Abschluss werden die unterschiedlichen Projekten (XML, JSON) genutzt, um Webservices (SOAP \nund REST) zu implementieren.\n\nEs ist dringend empfohlen, die Bezeichner so zu verwenden, wie im Übungsskript angegeben, da die \nÜbungen aufeinander aufbauen.\n\nDie Aufgaben basieren auf der Annahme dass der Namespace _TRAINING_ verwendet wird und der \nServer unter `localhost:52773` installiert ist. Für eine andere Konfiguration bitte daran denken, die \nfolgenden Anweisungen entsprechend anzupassen. Bis auf die Artikelklasse werden alle Inhalte neu \nerstellt. Falls in einer eigenen Umgebung gearbeitet wird, stellt der Kursleiter diese Datei zum Import zur \nVerfügung. Auch die API Spezifikation für Übung 17 wird separat verteilt.\n","tip":"","result":""},{"content":"## Aufgabe 1 _Persistent vs. Registered vs. Serial_\n\nIn InterSystems IRIS gibt es verschiedene Möglichkeiten, Datenklassen zu definieren. Es wird \nunterschieden in\n- **Persistent**: Objekte dieses Typs können dauerhaft gespeichert werden und haben \nstandardmäßig eine SQL-Projektion\n- **Registered**: Objekte dieses Typs existieren nur im Memory und sind somit flüchtig\n- **Serial**: Diese Objekte werden in persistente oder registrierte Objekte eingebettet und haben in \nder Datenbank keine eigene Identität. Wird das einbettende Objekt zerstört, wird auch das \neingebettete Objekt zerstört. ","tip":"","result":""},{"content":"1. Beginnen wir mit der Definition einer Klasse für das Speichern der Kunden in der Datenbank\n**training.Kunde**. Dabei handelt es sich um eine persistente Klasse, da Kundenobjekte dauerhaft \ngespeichert werden sollen und auch per SQL zugreifbar sein sollen.\n2. Die Klasse soll zunächst die beiden Properties **KundenNr** _%Integer_ und **Name** _%String_ haben. \n3. Definieren Sie für das Property **KundenNr** den **MINVAL = 1**. Da wir später den Datengenerator \nvon IRIS nutzen wollen, soll die Klasse zunächst von _**%Persistent**_ und _**%Populate**_ erben.\nEin Speichern des Kunden ohne dass eine KundenNr und ein Name spezifiziert wurden, soll \nnicht möglich sein. Deshalb definieren wir diese beiden Properties als **required**.\n","tip":"Das Konstrukt der Klasse sollte in etwa so aussehen:\n\n```\nClass Name Extends (Superklassen)\n{\n\nProperty Name As Typ(Parameter) [ Optionen ];\n\n...\n\n}\n```","result":"```objectscript\nClass training.Kunde Extends (%Persistent, %Populate)\n{\n\nProperty KundenNr As %Integer(MINVAL = 1) [ Required ];\n\nProperty Name As %String [ Required ];\n\nStorage Default\n{\n<Data name=\"KundeDefaultData\">\n<Value name=\"1\">\n<Value>%%CLASSNAME</Value>\n</Value>\n<Value name=\"2\">\n<Value>KundenNr</Value>\n</Value>\n<Value name=\"3\">\n<Value>Name</Value>\n</Value>\n</Data>\n<DataLocation>^training.KundeD</DataLocation>\n<DefaultData>KundeDefaultData</DefaultData>\n<IdLocation>^training.KundeD</IdLocation>\n<IndexLocation>^training.KundeI</IndexLocation>\n<StreamLocation>^training.KundeS</StreamLocation>\n<Type>%Storage.Persistent</Type>\n}\n}\n```"},{"content":"4. Im nächsten Schritt wird die Kundenklasse um eine serielle Klasse erweitert. Diese Klasse \nbeschreibt die Anschrift des Kunden.\nDefinieren Sie eine Klasse training.Adresse. Die Klasse hat die folgenden Properties:\n\n   - **Ort %String**\n   - **PLZ %Integer**\n   - **Strasse %String**\n   - und erweitert **%SerialObject** und **%Populate**. \n\n5. Die Arbeitsweise des Datengenerators kann über den Parameter POPSPEC gesteuert werden.\nSpezifizieren Sie den Parameter POPSPEC für die drei Properties. Die Daten für den Ort sollen \nmit der Methode `City()` erzeugt werden. Für die PLZ spezifizieren Sie bitte `USZip()` und für \nStrasse `Street()`.\n","tip":"","result":"```objectscript\nClass training.Adresse Extends (%SerialObject, %Populate)\n{\n\nProperty Ort As %String(POPSPEC = \"City()\");\n\nProperty PLZ As %Integer(POPSPEC = \"USZip()\");\n\nProperty Strasse As %String(POPSPEC = \"Street()\");\n\nStorage Default\n{\n<Data name=\"AdresseState\">\n<Value name=\"1\">\n<Value>Ort</Value>\n</Value>\n<Value name=\"2\">\n<Value>PLZ</Value>\n</Value>\n<Value name=\"3\">\n<Value>Strasse</Value>\n</Value>\n</Data>\n<State>AdresseState</State>\n<StreamLocation>^training.AdresseS</StreamLocation>\n<Type>%Storage.Serial</Type>\n}\n}\n```"},{"content":"6. Im nächsten Schritt werden nun die Kundenklasse und die Adressklasse miteinander verknüpft. \nDazu wird in der Kundenklasse eine Property **Anschrift** vom Typ **training.Adresse** definiert.\n7. Speichern und compilieren Sie die Klassen. In der nächsten Übung werden zu den Kunden \nDaten erzeugt und die SQL-Projektion untersucht.","tip":"","result":"```objectscript\nClass training.Kunde Extends (%Persistent, %Populate)\n{\n\nProperty KundenNr As %Integer(MINVAL = 1) [ Required ];\n\nProperty Name As %String [ Required ];\n\nProperty Anschrift As training.Adresse;\n\nStorage Default\n{\n<Data name=\"KundeDefaultData\">\n<Value name=\"1\">\n<Value>%%CLASSNAME</Value>\n</Value>\n<Value name=\"2\">\n<Value>KundenNr</Value>\n</Value>\n<Value name=\"3\">\n<Value>Name</Value>\n</Value>\n<Value name=\"4\">\n<Value>Anschrift</Value>\n</Value>\n</Data>\n<DataLocation>^training.KundeD</DataLocation>\n<DefaultData>KundeDefaultData</DefaultData>\n<IdLocation>^training.KundeD</IdLocation>\n<IndexLocation>^training.KundeI</IndexLocation>\n<StreamLocation>^training.KundeS</StreamLocation>\n<Type>%Storage.Persistent</Type>\n}\n}\n```"},{"content":"## Aufgabe 2 _Datenerzeugung und erste Abfragen_\n\n1. Zur Erzeugung der Daten öffnen Sie ein Terminalfenster vom Menü des IRIS Cube’s in der \nTaskleiste\n2. Im Namespace **TRAINING** geben Sie ein: \n\n```bash\nTRAINING>write ##class(training.Kunde).Populate(100)\n```\n\n3. Welche Ausgabe erhalten Sie?","tip":"","result":"Die Populate Methode ruft den Datengenerator auf. Dieser ist der Klasse Kunde durch Erweiterung \nder Klasse %Populate hinzugefügt worden. Die Populate Methode gibt die Anzahl der erzeugten \nObjekte/Datensätze zurück. In unserem Beispiel gibt der aktuelle Parameter 100 an, dass 100 \nKundenobjekte erzeugt werden sollen.\n"},{"content":"4. Überprüfen Sie, dass 100 Kunden angelegt wurden. Starten Sie dazu das System \nManagement Portal und gehen Sie dazu in den Explorer und dann SQL. Stellen Sie sicher, \ndass Sie im Namespace TRAINING stehen. Zählen Sie per SQL die Anzahl der \nKundendatensätze.\n5. Lassen Sie sich die Kundendatensätze anzeigen. Wie werden die Adressdaten angezeigt?","tip":"","result":"Als ID"},{"content":"6. Starten Sie vom IRIS Cube die Class Reference und wechseln Sie in den Namespace \nTRAINING\n7. Suchen Sie die Dokumentation Ihrer Klassen\n\n_Klassen werden automatisch in der Class Reference dokumentiert. Diese Dokumentation \nwird dynamisch beim Aufruf erzeugt und ist somit immer aktuell.\nFür die Dokumentation gibt es eine spezielle Form von Kommentaren. Diese werden \nzeilenweise durch drei Slashs eingeleitet._","tip":"","result":""},{"content":"8. Fügen Sie den Properties in der Kundenklasse Kommentare mit vorangestellten `///` hinzu.\n9. Speichern und Kompilieren Sie die Klasse und überprüfen Sie das Ergebnis in der Class \nReference","tip":"","result":""}],"config":{"password":"123","language":"deutsch","author":"pbonin","description":"Grundlagen Kurs für Objectscript"}}]}